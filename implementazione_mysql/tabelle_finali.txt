/* Di ciascun attributo è necessario specificarne il tipo [varchar(n) | [tiny]int(m)..], il valore di default [default 0 | user | null...], e i vincoli [not null | unique]*/

DROP TABLE IF EXISTS `Animale`;
CREATE TABLE `Animale`
(
	codice	int unsigned not null unique auto_increment,
	sesso	enum('Maschio', 'Femmina'),
	specie	varchar(30),
	famiglia	tinytext,
	idMadre	int unsigned check(idMadre in (SELECT codice FROM Animale)),
	idPadre	int unsigned check(idPadre in (SELECT codice FROM Animale)),
	dataDiNascita	date,
	altezza	tinyint unsigned,
	peso	smallint unsigned,
	razza	tinytext,
	posizione	blob(8), 
	orario	timestamp, 
	codiceGps	int unsigned not null unique auto_increment,
	codLocale	int unsigned not null,
	primary key (codice),
	foreign key (codLocale) references Locale(codice)
);

DROP TABLE IF EXISTS `acquistoanimale`;
CREATE TABLE `acquistoanimale`
(
	codiceAnimale	int unsigned not null unique,
	ragioneSocialeFornitore	varchar(40),
	dataAcquisto	date,
	dataArrivo	date,
	primary key (codiceAnimale),
	foreign key (codiceAnimale) references Animale(codice)
);

DROP TABLE IF EXISTS `Fornitore`;
CREATE TABLE `Fornitore`
(
	ragioneSociale	varchar(40) not null unique,
	indirizzo	varchar(60),
	partitaIva	dec(11),
	primary key(ragioneSociale)	 
);

DROP TABLE IF EXISTS `Riproduzione`;
CREATE TABLE `Riproduzione`
(
	codiceRiproduzione	int unsigned not null unique,
	complicanza	varchar(100),
	data_orario:	timestamp,
	stato	enum('successo', 'insuccesso'),
	codVeterinario	char(16),
	codiceMadre	int unsigned,
	codicePadre	int unsigned,
	primary key (codiceRiproduzione),
	foreign key (codVeterinario) references Veterinario(codiceFiscale), 
	foreign key (codiceMadre) references Animale(codice)
);

DROP TABLE IF EXISTS `SchedaGestazione`;
CREATE TABLE `SchedaGestazione`
(
	codiceGestazione	int unsigned not null unique auto_increment,
	codRiproduzione	int unsigned not null unique,
	codVeterinario	int unsigned not null ,
	primary key (codiceGestazione),
	foreign key (codRiproduzione) references Riproduzione(codiceRiproduzione), 
	foreign key (codVeterinario) references Veterinario(codiceFiscale)
);

DROP TABLE IF EXISTS `Agriturismo`;
CREATE TABLE `Agriturismo`
(
	Nome	varchar(30) not null unique,
	primary key(Nome)	 
);

DROP TABLE IF EXISTS `Stalla`;
CREATE TABLE `Stalla`
(
	numProgressivo	tinyint unsigned not null,
	nomeAgriturismo	varchar(30) not null,
	primary key (numProgressivo, nomeAgriturismo),
	foreign key (nomeAgriturismo) references Agriturismo(nome)
);

DROP TABLE IF EXISTS `Locale`;
CREATE TABLE `Locale`
(
	codiceLocale	int unsigned not null unique auto_increment,
	temperatura	float,
	umidità	float,
	orientazioneFinestre	enum('N','NE', 'E', 'SE', 'S', 'SO', 'O', 'NO'),
	tollerabilitaAzoto	tinyint unsigned,
	tollerabilitaSporcizia	tinyint unsigned,
	tollerabilitaMetano	tinyint unsigned,
	nomeAgriturismo	varchar(30) not null,
	specieOspitata	varchar(30) check(specieOspitata in (select distinct(specie) from Animale)),
	altezza	smallint unsigned not null,
	lunghezza	smallint unsigned not null,
	larghezza	smallint unsigned not null,
	primary key (codiceLocale),
	foreign key (nomeAgriturismo) references Agriturismo(nome), 
	foreign key (specieOspitata, altezza, lunghezza, larghezza) references CaratteristichePerTipoLocale(specieOspitata, altezza, lunghezza, larghezza)
);

DROP TABLE IF EXISTS `CaratteristichePerTipoLocale`;
CREATE TABLE `CaratteristichePerTipoLocale`
(
	specieOspitata	varchar(30) check(specieOspitata in (select distinct(specie) from Animale)),
	altezza	smallint unsigned not null,
	lunghezza	smallint unsigned not null,
	larghezza	smallint unsigned not null,
	capienzaMax	tinyint unsigned not null,
	pavimentazione	varchar(30),
	primary key (specieOspitata, altezza, lunghezza, larghezza)	 
);

DROP TABLE IF EXISTS `Visivi`;
CREATE TABLE `Visivi`
(
	codiceVisivo	int unsigned not null unique auto_increment,
	livelloSporcizia	float,
	orarioRilevazione	timestamp not null,
	codLocale	int unsigned not null,
	primary key (codiceVisivo),
	foreign key (codLocale) references Locale(codice)
);

DROP TABLE IF EXISTS `Ambientali`;
CREATE TABLE `Ambientali`
(
	codiceAmbientale	int unsigned not null unique auto_increment,
	temperatura	float,
	umidità	float,
	orarioRilevazione	timestamp not null,
	codLocale	int unsigned not null,
	primary key (codiceAmbientale),
	foreign key (codLocale) references Locale(codice)
);

DROP TABLE IF EXISTS `CompostiVolatili`;
CREATE TABLE `CompostiVolatili`
(
	codiceVolatili	int unsigned not null unique auto_increment,
	concentrazioneMetano	float,
	concentrazioneAzoto	float,
	codLocale	int unsigned not null,
	primary key (codiceVolatili),
	foreign key (codLocale) references Locale(codice)
);

DROP TABLE IF EXISTS `PuliziaLocale`;
CREATE TABLE `PuliziaLocale`
(
	codLocale	int unsigned not null,
	data_orarioRilevazione	timestamp,
	stato	enum('pendente', effettuato'),
	personale	int unsigned not null,
	primary key (codLocale, orarioRilevazione, dataRilevazione),
	foreign key (codLocale) references Locale(codice)
);

DROP TABLE IF EXISTS `PastoPerLocale`;
CREATE TABLE `PastoPerLocale`
(
	giorno_orario	timestamp,
	codLocale	int unsigned not null,
	fibre	tintyint unsigned,
	proteine	tinyint unsigned,
	glucidi	tinyint,
	concentrazioneSali	tinyint unsigned,
	concentrazioneVitamine	tinyint unsigned,
	primary key (giorno, orario,  codLocale),
	foreign key (codLocale) references Locale(codice), 
	foreign key (fibre, proteine, glucidi, concentrazioneSali, concentrazioneVitamine) references Pasto(fibre, proteine, glucidi, concentrazioneSali, concentrazioneVitamine)
);

DROP TABLE IF EXISTS `Pasto`;
CREATE TABLE `Pasto`
(
	fibre	tinyint unsigned,
	proteine	tinyint unsigned,
	glucidi	tinyint unsigned,
	concentrazioneSali	tinyint unsigned,
	concentrazioneVitamine	tinyint unsigned,
	primary key (fibre, proteine, glucidi, concentrazioneSali, concentrazioneVitamine),
	foreign key (fibre, proteine, glucidi) references Foraggio(fibre, proteine, glucidi), 
	foreign key (concentrazioneSali, concentrazioneVitamine) references Acqua(concentrazioneSali, concentrazioneVitamine)
);

DROP TABLE IF EXISTS `Foraggio`;
CREATE TABLE `Foraggio`
(
	fibre	tinyint unsigned,
	proteine	tinyint unsigned,
	glucidi	tinyint insigned,
	cereali	tinyint unsigned,
	frutta	tinyint unsigned,
	piante	tinyint unsigned,
	forma	enum('insilato', 'fieno'),
	kcalkg	tinyint unsigned,
	primary key (fibre, proteine, glucidi)	 
);

DROP TABLE IF EXISTS `Acqua`;
CREATE TABLE `Acqua`
(
	concentrazioneSali	tinyint unsigned,
	concentrazioneVitamine	tinyint unsigned,
	primary key (concentrazioneSali, concentrazioneVitamine)	 
);

DROP TABLE IF EXISTS `Mangiatoia`;
CREATE TABLE `Mangiatoia`
(
	codice	int unsigned not null unique auto_increment,
	quantitàRestante	tinyint unsigned,
	codLocale	int unsigned,
	primary key (codice),
	foreign key (codLocale) references Locale(codice)
);

DROP TABLE IF EXISTS `Abberveratoio`;
CREATE TABLE `Abberveratoio`
(
	codice	int unsigned not null unique auto_increment,
	quantitàRestante tinyint unsigned,
	codLocale	int unsigned,
	primary key (codice),
	foreign key (codLocale) references Locale(codice)
);

DROP TABLE IF EXISTS `AttivitàPascolo`;
CREATE TABLE `AttivitàPascolo`
(
	codiceAttivita	int unsigned not null unique auto_increment,
	fasciaOraria	time,
	codLocale	int unsigned not null,
	codArea	tinyint unsigned,
	primary key (codiceAttivita),
	foreign key (codLocale) references Locale(codice), 
	foreign key (codArea) references Area(codiceArea)
);

DROP TABLE IF EXISTS `AreaPascolo`;
CREATE TABLE `AreaPascolo`
(
	codiceArea	tinyint unsigned not null unique auto_increment,
	primary key(codiceArea)	 
);

DROP TABLE IF EXISTS `RecinzioneDivisoriaeZoneDiPascolo`;
CREATE TABLE `RecinzioneDivisoriaeZoneDiPascolo`
(
	codiceZona	tinyint unsigned not null unique auto_increment,
	codArea	tinyint unsigned,
	longitudine	float,
	latitudine	float,
	primary key (codiceZona, codArea),
	foreign key (codArea) references Area(codiceArea)
);

DROP TABLE IF EXISTS `Mungitura`;
CREATE TABLE `Mungitura`
(
	codAnimale	int unsigned not null,
	codMungitrice	int unsigned not null,
	data_orario	timestamp not null,
	quantità	int unsigned,
	primary key (codAnimale, codMungitrice, data, ora),
	foreign key (codAnimale) references Animale(codice), 
	foreign key (codMungitrice) references Mungitrice(codice)
);

DROP TABLE IF EXISTS `Mungitrice`;
CREATE TABLE `Mungitrice`
(
	codice	int unsigned not null unique auto_increment,
	longitudine	float,
	latitudine	float,
	marca	varchar(20),
	modello	varchar(50),
	primary key(codice)	 
);

DROP TABLE IF EXISTS `chemunge`;
CREATE TABLE `chemunge`
(
	codLatte	int unsigned not null,
	codMungitrice	int unsigned not null,
	primary key (codLatte, codMungitrice),
	foreign key (codLatte) references Latte(codiceLatte), 
	foreign key (codMungitrice) references Mungitrice(codice)
);

DROP TABLE IF EXISTS `Latte`;
CREATE TABLE `Latte`
(
	codiceLatte	int unsigned not null unique auto_increment,
	quantitàSostanzeDisciolte	tinyint unsigned not null,
	codAnimale	int unsigned not null,
	codSilos	int unsigned,
	primary key (codiceLatte),
	foreign key (codAnimale) references Animale(codice), 
	foreign key (codSilos) references Silos(codice)
);

DROP TABLE IF EXISTS `Silos`;
CREATE TABLE `Silos`
(
	codice	int unsigned not null unique,
	capacità	tinyint not null,
	livello	tinyint,
	primary key(codice)	 
);

DROP TABLE IF EXISTS `prodottocon`;
CREATE TABLE `prodottocon`
(
	codLatte	int unsigned not null,
	codLotto	int unsigned not null,
	primary key (codLatte, codLotto),
	foreign key (codLatte) references Latte(codiceLatte), 
	foreign key (codLotto) references Lotto(codiceLotto)
);

DROP TABLE IF EXISTS `Lotto`;
CREATE TABLE `Lotto`
(
	codiceLotto	int unsigned not null unique auto_increment,
	codDipendenti	int unsigned,
	dataProd	date not null,
	codLab	int unsigned not null,
	durata	time,
	primary key(codiceLotto)	 
);

DROP TABLE IF EXISTS `stoccaggiocantine`;
CREATE TABLE `stoccaggiocantine`
(
	codLotto	int unsigned not null,
	codCantina	int unsigned not null,
	primary key (codLotto, codCantina),
	foreign key (codLotto) references Lotto(codiceLotto), 
	foreign key (codCantina) references Cantina(codice)
);

DROP TABLE IF EXISTS `stoccaggiomagazzini`;
CREATE TABLE `stoccaggiomagazzini`
(
	codLotto	int unsigned not null,
	codMagazzino	int unsigned not null,
	primary key (codLotto, codMagazzino),
	foreign key (codLotto) references Lotto(codiceLotto), 
	foreign key (codMagazzino) references Magazzino(codice)
);

DROP TABLE IF EXISTS `Cantine`;
CREATE TABLE `Cantine`
(
	codice	int unsigned not null unique auto_increment,
	primary key(codice)	 
);

DROP TABLE IF EXISTS `Magazzini`;
CREATE TABLE `Magazzini`
(
	codice	int unsigned not null unique auto_increment,
	primary key(codice)	 
);

DROP TABLE IF EXISTS `Scaffalature`;
CREATE TABLE `Scaffalature`
(
	codCantina	int unsigned not null unique,
	codice	int unsigned not null unique,
	primary key (codCantina, codice),
	foreign key (codCantina) references Cnatine(codice)
);

DROP TABLE IF EXISTS `Parametri`;
CREATE TABLE `Parametri`
(
	data	date not null,
	idSensore	int unsigned not null,
	temperatura	float,
	umidità	float,
	codCantina	int unsigned not null,
	primary key (data, idSensore),
	foreign key (codCantina) references Cantine(codice)
);

DROP TABLE IF EXISTS `Scaffali`;
CREATE TABLE `Scaffali`
(
	codice	<++>,
	codMagazzino	<++>,
	primary key (codice, codMagazzino),
	foreign key (codMagazzino) references <++>(<++>)
);

DROP TABLE IF EXISTS `ControlloParametriFase`;
CREATE TABLE `ControlloParametriFase`
(
	parametriEffettivi	<++>,
	codLotto	<++>,
	codFase	<++>,
	primary key (parametriEffettivi, codLotto, codFase),
	foreign key (codLotto, codFase) references <++>(<++>)
);

DROP TABLE IF EXISTS `Fasi`;
CREATE TABLE `Fasi`
(
	codiceFase	<++>,
	nome	<++>,
	parametriProcesso	<++>,
	durata	<++>,
	primary key(codiceFase)	 
);

DROP TABLE IF EXISTS `divisain`;
CREATE TABLE `divisain`
(
	codRicetta	<++>,
	codFase	<++>,
	primary key (codRicetta, codFase),
	foreign key (codRicetta, codFase) references <++>(<++>)
);

DROP TABLE IF EXISTS `Ricetta`;
CREATE TABLE `Ricetta`
(
	codiceRicetta	<++>,
	collocazioneGeografica	<++>,
	ricetta	<++>,
	durataStagionatura	<++>,
	primary key(codiceRicetta)	 
);

DROP TABLE IF EXISTS `Formaggio`;
CREATE TABLE `Formaggio`
(
	nome	<++>,
	nomeAgriturismo	<++>,
	deperibilita	<++>,
	codRicetta	<++>,
	codLatte	<++>,
	primary key (nome, nomeAgriturismo),
	foreign key (nomeAgriturismo) references <++>(<++>)
);

DROP TABLE IF EXISTS `Indicisalute`;
CREATE TABLE `Indicisalute`
(
	codAnimale	<++>,
	dataRilevazione	<++>,
	tipologiaRespirazione	<++>,
	lucentezzaPelo	<++>,
	vigilanza	<++>,
	idratazione	<++>,
	deambulazione	<++>,
	primary key (codAnimale, dataRilevazione),
	foreign key (codAnimale) references <++>(<++>)
);

DROP TABLE IF EXISTS `Visita`;
CREATE TABLE `Visita`
(
	codiceVisita	<++>,
	esito	<++>,
	descrizione	<++>,
	dataEffettiva	<++>,
	dataProgrammata	<++>,
	codAnimale	<++>,
	codVeterinario	<++>,
	primary key (codiceVisita),
	foreign key (codAnimale, codVeterinario) references <++>(<++>)
);

DROP TABLE IF EXISTS `Esame`;
CREATE TABLE `Esame`
(
	codiceEsame	<++>,
	descrizione	<++>,
	data	<++>,
	macchinario	<++>,
	nome	<++>,
	codAnimale	<++>,
	codVeterinario	<++>,
	primary key (codiceEsame),
	foreign key (codAnimale, codVeterinario) references <++>(<++>)
);

DROP TABLE IF EXISTS `Veterinario`;
CREATE TABLE `Veterinario`
(
	codiceFiscale	<++>,
	nome	<++>,
	cognome	<++>,
	contatto	<++>,
	primary key(codiceFiscale)	 
);

DROP TABLE IF EXISTS `Terapia`;
CREATE TABLE `Terapia`
(
	codiceTerapia	<++>,
	dataInizio	<++>,
	durata	<++>,
	secondaTerapiaConsecutiva	<++>,
	codAnimale	<++>,
	primary key (codiceTerapia),
	foreign key (codAnimale) references <++>(<++>)
);

DROP TABLE IF EXISTS `compostada`;
CREATE TABLE `compostada`
(
	codTerapia	<++>,
	nomeFarmaco	<++>,
	posologia	<++>,
	primary key (codTerapia, nomeFarmaco),
	foreign key (codTerapia, nomeFarmaco) references <++>(<++>)
);

DROP TABLE IF EXISTS `Farmaco`;
CREATE TABLE `Farmaco`
(
	nome	<++>,
	principioAttivo	<++>,
	dosaggio	<++>,
	primary key(nome)	 
);

DROP TABLE IF EXISTS `SchedaMedica`;
CREATE TABLE `SchedaMedica`
(
	codiceScheda	<++>,
	massaMagra	<++>,
	carenze	<++>,
	patologie	<++>,
	data	<++>,
	rispostaOculare	<++>,
	emocromo	<++>,
	spessoreZoccolo	<++>,
	fegato	<++>,
	cuore	<++>,
	pancreas	<++>,
	massaMagra	<++>,
	codAnimale	<++>,
	codVeterinario	<++>,
	primary key (codiceScheda),
	foreign key (codAnimale, codVeterinario) references <++>(<++>)
);

DROP TABLE IF EXISTS `DisturbiComportamentali`;
CREATE TABLE `DisturbiComportamentali`(entità	<++>,
	nome	<++>,
	codScheda)  primary key (entità, nome, codScheda),
	foreign key (codScheda) references <++>(<++>)
DROP TABLE IF EXISTS `Lesioni`;
CREATE TABLE `Lesioni`
(
	tipologia	<++>,
	parteDelCorpo	<++>,
	entità	<++>,
	codScheda	<++>,
	primary key (tipologia, parteDelCorpo, entità, codScheda),
	foreign key (codScheda) references <++>(<++>)
);

DROP TABLE IF EXISTS `Cliente`;
CREATE TABLE `Cliente`
(
	codCarta	<++>,
	anticipo	<++>,
	primary key(codCarta)	 
);

DROP TABLE IF EXISTS `Pagamenti`;
CREATE TABLE `Pagamenti`
(
	codPagamento	<++>,
	tipoPagamento	<++>,
	totaleCosto	<++>,
	data	<++>,
	ora	<++>,
	codCliente	<++>,
	primary key (codPagamento),
	foreign key (codCliente) references <++>(<++>)
);

DROP TABLE IF EXISTS `PrenotazioneStanza`;
CREATE TABLE `PrenotazioneStanza`
(
	dataArrivo	<++>,
	nomeAgriturismo	<++>,
	codCliente	<++>,
	numStanza	<++>,
	dataPartenza	<++>,
	primary key (dataArrivo, nomeAgriturismo, codCliente, numStanza),
	foreign key (nomeAgriturismo, codCliente, numStanza) references <++>(<++>)
);

DROP TABLE IF EXISTS `Stanza`;
CREATE TABLE `Stanza`
(
	numStanza	<++>,
	codAgriturismo	<++>,
	costoGiornaliero	<++>,
	suite	<++>,
	numLetti	<++>,
	tipoLetti	<++>,
	primary key (numStanza, codAgriturismo),
	foreign key (codAgriturismo) references <++>(<++>)
);

DROP TABLE IF EXISTS `ServizioperStanza`;
CREATE TABLE `ServizioperStanza`
(
	dataInizioUtilizzo	<++>,
	dataArrivo	<++>,
	codCliente	<++>,
	numStanza	<++>,
	nomeAgriturismo	<++>,
	codServizio	<++>,
	dataFineUtilizzo	<++>,
	primary key (dataInizioUtilizzo, dataArrivo, codCliente, numStanza, nomeAgriturismo, codServizio),
	foreign key (dataArrivo, codCliente, numStanza, nomeAgriturismo, codServizio) references <++>(<++>)
);

DROP TABLE IF EXISTS `ServizioAggiuntivo`;
CREATE TABLE `ServizioAggiuntivo`
(
	tipoServizio	<++>,
	costo	<++>,
	primary key(tipoServizio)	 
);

DROP TABLE IF EXISTS `PrenotazioneEscursione`;
CREATE TABLE `PrenotazioneEscursione`
(
	dataPrenotazione	<++>,
	codEscursione	<++>,
	codCliente	<++>,
	primary key (dataPrenotazione, codEscursione, codCliente),
	foreign key (codEscursione, codCliente) references <++>(<++>)
);

DROP TABLE IF EXISTS `Escursione`;
CREATE TABLE `Escursione`
(
	codice	<++>,
	giorno	<++>,
	orario	<++>,
	codGuida	<++>,
	primary key (codice),
	foreign key (codGuida) references <++>(<++>)
);

DROP TABLE IF EXISTS `Guida`;
CREATE TABLE `Guida`
(
	codfisc	<++>,
	nome	<++>,
	cognome	<++>,
	contatto	<++>,
	primary key(codfisc)	 
);

DROP TABLE IF EXISTS `legataa`;
CREATE TABLE `legataa`
(
	codEscursione	<++>,
	codItinerario	<++>,
	primary key (codEscursione, codItinerario),
	foreign key (codEscursione, codItinerario) references <++>(<++>)
);

DROP TABLE IF EXISTS `Itinerario`;
CREATE TABLE `Itinerario`
(
	codice	<++>,
	numSentieri	<++>,
	codAgriturismo	<++>,
	primary key (codice),
	foreign key (codAgriturismo) references <++>(<++>)
);

DROP TABLE IF EXISTS `compostoda`;
CREATE TABLE `compostoda`( codItinerario	<++>,
	nomeTappa)     primary key (codItinerario, nomeTappa),
	foreign key (codItinerario, nomeTappa) references <++>(<++>)
DROP TABLE IF EXISTS `Tappe`;
CREATE TABLE `Tappe`
(
	nome	<++>,
	tempoPermanenza	<++>,
	primary key(nome) 	 
);

DROP TABLE IF EXISTS `Account`;
CREATE TABLE `Account`
(
	utente	<++>,
	password	<++>,
	domandaRec	<++>,
	rispostaRec	<++>,
	numTelefono	<++>,
	codFiscale	<++>,
	scadenzaDoc	<++>,
	numDoc	<++>,
	dataIscrizione	<++>,
	codDoc	<++>,
	cognome	<++>,
	nome	<++>,
	enteRilascio	<++>,
	tipoDoc	<++>,
	indirizzo	<++>,
	codiceCarta	<++>,
	primary key (utente, password),
	foreign key (codiceCarta) references <++>(<++>)
);

DROP TABLE IF EXISTS `Recensione`;
CREATE TABLE `Recensione`
(
	codiceRecensione	<++>,
	gradimentoGenerale	<++>,
	qualitaPercepita	<++>,
	conservazione	<++>,
	campoTestuale	<++>,
	gusto	<++>,
	utente	<++>,
	password	<++>,
	codProdotto	<++>,
	primary key (codiceRecensione),
	foreign key (utente, password, codProdotto) references <++>(<++>)
);

DROP TABLE IF EXISTS `FormaggioProdotto`;
CREATE TABLE `FormaggioProdotto`
(
	codiceProdotto	<++>,
	prezzo	<++>,
	peso	<++>,
	stockAppartenenza	<++>,
	rimastiInStock	<++>,
	scadenza	<++>,
	nome	<++>,
	nomeAgriturismo	<++>,
	primary key (codiceProdotto),
	foreign key (nome, nomeAgriturismo) references <++>(<++>)
);

DROP TABLE IF EXISTS `contenutoordine`;
CREATE TABLE `contenutoordine`
(
	codOrdine	<++>,
	codFormaggioprodotto	<++>,
	quantità	<++>,
	reso	<++>,
	primary key (codOrdine, codFormaggioprodotto),
	foreign key (codOrdine, codFormaggioprodotto) references <++>(<++>)
);

DROP TABLE IF EXISTS `OrdineProdotti`;
CREATE TABLE `OrdineProdotti`
(
	codiceOrdine	<++>,
	stato	<++>,
	data	<++>,
	tipoConsegnaReso	<++>,
	utente	<++>,
	password	<++>,
	codSpedizione	<++>,
	primary key (codiceOrdine),
	foreign key (utente, password, codSpedizione) references <++>(<++>)
);

DROP TABLE IF EXISTS `Spedizione`;
CREATE TABLE `Spedizione`
(
	codice	<++>,
	dataConsegnaEffettiva	<++>,
	dataConsegnaPrevista	<++>,
	percorso	<++>,
	stato	<++>,
	primary key(codice)	 
);

DROP TABLE IF EXISTS `processatada`;
CREATE TABLE `processatada`
(
	codSpedizione	<++>,
	codcentro	<++>,
	primary key (codSpedizione, codcentro),
	foreign key (codSpedizione, codcentro) references <++>(<++>)
);

DROP TABLE IF EXISTS `CentridiSmistamento`;
CREATE TABLE `CentridiSmistamento`
(
	codice	<++>,
	nome	<++>,
	indirizzo	<++>,
	contatto	<++>,
	primary key(codice)	 
);
